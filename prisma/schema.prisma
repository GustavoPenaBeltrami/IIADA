// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Course {
  id          String       @id @default(uuid())
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  sections    Section[]
  test        Test?
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Section {
  id                  String                @id @default(uuid())
  title               String                @db.Text
  description         String?               @db.Text
  videoUrl            String?               @db.Text
  duration            Int?
  number              Int                   @default(autoincrement())
  courseId            String
  course              Course                @relation(fields: [courseId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  UserSectionProgress UserSectionProgress[]
}

model Test {
  id        String     @id @default(uuid())
  courseId  String     @unique
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id        String   @id @default(uuid())
  number    Int
  text      String
  testId    String
  test      Test     @relation(fields: [testId], references: [id])
  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id          String       @id @default(uuid())
  name        String?
  lastName    String?
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
}

model Enrollment {
  id                  String                @id @default(uuid())
  paid                Boolean
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  courseId            String
  course              Course                @relation(fields: [courseId], references: [id])
  grades              Grade[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  UserSectionProgress UserSectionProgress[]

  @@unique([userId, courseId])
}

model UserSectionProgress {
  id           String     @id @default(uuid())
  sectionId    String
  section      Section    @relation(fields: [sectionId], references: [id])
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String
  finished     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([sectionId]) // Cada usuario solo puede tener un registro de progreso por secci√≥n
}

model Grade {
  id           String     @id @default(uuid())
  score        Float
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
